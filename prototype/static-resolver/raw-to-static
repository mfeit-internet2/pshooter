#!/usr/bin/python

import pscheduler
import sys

domain = "net.internet2.edu."
count = None

result = {
    "arpa": {
       "in-addr": { },
       "ip6": { }
    },
}

domain_parts = domain.split(".")[::-1]
if domain_parts[0] == '':
    del domain_parts[0]

result_pointer = result
while domain_parts:
    result_pointer[domain_parts[0]] = {}
    result_pointer = result_pointer[domain_parts[0]]
    del domain_parts[0]


pops = {}

for line in sys.stdin:
    (hostname, ip) = [ word.strip() for word in line.split(",") ]

    # TODO: Detect and handle IPv4/IPv6
    ip_reversed = ".".join(ip.split(".")[::-1])
    result["arpa"]["in-addr"][ip_reversed] = {
        "PTR": "{0}.{1}".format(hostname, domain)
        }

    host_parts = hostname.split(".")
    pop = host_parts[-1]
    host_parts[0] = "_ipv4._perfsonar.{0}".format(host_parts[0])
    ps_record_hostname = ".".join(host_parts)


    # Stash the POP name for later
    pops[pop] = 1


    result_pointer[hostname] = {
        "A": ip
    }

    # Handle limited conversion
    if count is not None:
        if count == 0:
            break
        else:
            count -= 1



# Add records for the PAS node in each POP.  Note that these are IPv4
# only.

for pop in pops.keys():
    # PAS hosts are named as follows:
    # pas-tst.chic.net.internet2.edu 64.57.25.23 (internal management)
    # em-2.400.pas-tst.chic.net.internet2.edu 198.71.46.56 (routable IP)

    # Tucson is an exception; its interface is em-1 instead of em-2
    em = 1 if pop == "tucs" else 2

    txt_record = {
        "pscheduler": "em-{0}.400.pas-tst.{1}.{2}".format(em, pop, domain)
    }

    result_pointer["_ipv4._perfsonar.{0}".format(pop)] = {
        "TXT": pscheduler.json_dump(txt_record)
    }



print pscheduler.json_dump(result, pretty=True)
